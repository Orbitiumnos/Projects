-- АНАЛИТИЧЕСКИЙ SQL
-- https://www.sql.ru/blogs/oracleandsql/1926

CREATE TABLE TEST_TABLE (
    id integer,
    value integer,
    descript varchar(20)
    );
    
INSERT INTO TEST_TABLE VALUES (1, 20, 'Val1');
INSERT INTO TEST_TABLE VALUES (2, 500, 'Val2');
INSERT INTO TEST_TABLE VALUES (3, 30, 'Val3');
INSERT INTO TEST_TABLE VALUES (4, 60, 'Val4');
INSERT INTO TEST_TABLE VALUES (5, 100, 'Val5');
INSERT INTO TEST_TABLE VALUES (6, 60, 'Val6');
INSERT INTO TEST_TABLE VALUES (7, 100, 'Val7');
INSERT INTO TEST_TABLE VALUES (8, 60, 'Val8');
INSERT INTO TEST_TABLE VALUES (9, 30, 'Val9');

SELECT * FROM TEST_TABLE;

-- 1
SELECT CAST(SUBSTR(DESCRIPT,4,1) AS INT) FROM TEST_TABLE;
SELECT REGEXP_SUBSTR(DESCRIPT,'(\d)') FROM TEST_TABLE;

-- 2
WITH A AS (
SELECT SUM(VALUE) AS SUM_RES 
FROM TEST_TABLE
)
SELECT (VALUE/A.SUM_RES) AS RES
FROM TEST_TABLE, A
ORDER BY (VALUE/A.SUM_RES);

-- 3
SELECT * FROM TEST_TABLE
WHERE VALUE IN (
    SELECT VALUE
    FROM TEST_TABLE
    GROUP BY VALUE HAVING COUNT(ID) > 1
    )
;

WITH 
TEST_TABLE(ID, OTD, NAME, SAL) AS (
  VALUES
  (1, 20, 'VAL1', 2000),
  (2, 500, 'VAL2', 7000),
  (3, 30, 'VAL3', 2330),
  (4, 60, 'VAL4', 3400),
  (5, 100, 'VAL5', 3400),
  (6, 60, 'VAL6', 7000),
  (7, 100, 'VAL7', 6780),
  (8, 60, 'VAL8', 2500),
  (9, 30, 'VAL9', 6650)
)
SELECT * FROM (select id, otd, sal,
count(id) over (partition by otd) as num
from TEST_TABLE)
WHERE num > 1
WITH UR;

-- 4
SELECT * FROM TEST_TABLE
WHERE ID NOT IN (
    SELECT MIN(ID) FROM TEST_TABLE
    GROUP BY VALUE
    )
;

-- 5
SELECT MIN(ID) 
FROM TEST_TABLE
WHERE ID NOT IN (
    SELECT MIN(ID) FROM TEST_TABLE
    GROUP BY VALUE 
    --HAVING COUNT(ID) > 0
    )
GROUP BY VALUE 
--HAVING COUNT(ID) > 0
;

-- 6
SELECT MEDIAN(VALUE) FROM TEST_TABLE;

-- 7
SELECT EXP(SUM(LN(value))) from TEST_TABLE;

-- 8
WITH 
TEST_TABLE(ID, VALUE, DESCRIPT) AS (
  VALUES
  (1, 20, 'VAL1'),
  (2, 500, 'VAL2'),
  (3, 30, 'VAL3'),
  (4, 60, 'VAL4'),
  (5, 100, 'VAL5'),
  (6, 60, 'VAL6'),
  (7, 100, 'VAL7'),
  (8, 60, 'VAL8'),
  (9, 30, 'VAL9')
)
SELECT ID, VALUE FROM TEST_TABLE
WHERE (
  VALUE IN (
    SELECT MAX(VALUE) 
    FROM TEST_TABLE
    WHERE ID IN (
      SELECT ID FROM TEST_TABLE 
      ORDER BY ID DESC
      FETCH FIRST 3 ROWS ONLY
     ) 
  )
  AND ID IN (
    SELECT ID FROM TEST_TABLE 
    ORDER BY ID DESC
    FETCH FIRST 3 ROWS ONLY
  )
)
OR ID IN (
  SELECT ID 
  FROM TEST_TABLE
  WHERE VALUE IN (
    SELECT MAX(VALUE) FROM TEST_TABLE
  )
)
WITH UR;

-- EXTRA

WITH 
T1(ID) AS (
  VALUES
  (1),
  (2),
  (2),
  (4),
  (5),
  (6),
  (null)
),
T2(ID) AS (
  VALUES
  (1),
  (2),
  (2),
  (3),
  (5),
  (6),
  (null)
)
SELECT * FROM T1
LEFT JOIN T2 ON T1.ID = T2.ID
;
